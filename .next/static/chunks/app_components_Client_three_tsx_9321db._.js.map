{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/kshtj/CourseWork/Study/portfolio/app/components/Client/three.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min.js\";\n\nconst gui = new GUI();\ngui.add(cube.position, \"x\", -10, 10);\ngui.add(cube.position, \"y\", -10, 10);\ngui.add(cube.position, \"z\", -10, 10);\n\nexport default function ThreeJSModel() {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const cubeRef = useRef<THREE.Mesh | null>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    if (!containerRef.current || sceneRef.current) return; // Prevent multiple initializations\n\n    // Set up scene\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Set up camera\n    const camera = new THREE.PerspectiveCamera(\n      50,\n      containerRef.current.clientWidth / containerRef.current.clientHeight,\n      0.1,\n      1000\n    );\n    camera.position.z = 5;\n\n    // Set up renderer\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setSize(\n      containerRef.current.clientWidth,\n      containerRef.current.clientHeight\n    );\n    renderer.setPixelRatio(window.devicePixelRatio);\n    containerRef.current.appendChild(renderer.domElement);\n\n    // Create cube geometry\n    const geometry = new THREE.BoxGeometry(2, 2, 2);\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0x3b82f6 }), // Blue color\n      new THREE.MeshBasicMaterial({ color: 0x3b82f6 }),\n      new THREE.MeshBasicMaterial({ color: 0x3b82f6 }),\n      new THREE.MeshBasicMaterial({ color: 0x3b82f6 }),\n      new THREE.MeshBasicMaterial({ map: createSmileyTexture() }), // Smiley face\n      new THREE.MeshBasicMaterial({ color: 0x3b82f6 }),\n    ];\n\n    // Create cube mesh\n    const cube = new THREE.Mesh(geometry, materials);\n    cubeRef.current = cube;\n    scene.add(cube);\n\n    console.log(\"Cube added to scene:\", cube);\n\n    // Rotation tracking\n    const targetRotation = new THREE.Vector2(0, 0);\n    const currentRotation = new THREE.Vector2(0, 0);\n\n    // Mouse tracking for interactive rotation\n    const handleMouseMove = (event: MouseEvent) => {\n      const rect = containerRef.current?.getBoundingClientRect();\n      if (rect) {\n        const x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n        const y = ((event.clientY - rect.top) / rect.height) * 2 - 1; // Fix inverted axis\n        targetRotation.set(x * 0.3, -y * 0.3);\n      }\n    };\n\n    const handleMouseLeave = () => targetRotation.set(0, 0);\n\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    containerRef.current.addEventListener(\"mouseleave\", handleMouseLeave);\n\n    // Function to create smiley face texture\n    function createSmileyTexture() {\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = 256;\n      canvas.height = 256;\n      const context = canvas.getContext(\"2d\");\n      if (!context) return new THREE.Texture();\n\n      // Blue background to match cube\n      context.fillStyle = \"#3b82f6\";\n      context.fillRect(0, 0, 256, 256);\n\n      // Draw smiley face\n      context.beginPath();\n      context.arc(128, 128, 100, 0, Math.PI * 2);\n      context.fillStyle = \"yellow\";\n      context.fill();\n\n      // Eyes\n      context.beginPath();\n      context.arc(90, 100, 15, 0, Math.PI * 2);\n      context.arc(166, 100, 15, 0, Math.PI * 2);\n      context.fillStyle = \"black\";\n      context.fill();\n\n      // Smile\n      context.beginPath();\n      context.moveTo(70, 170);\n      context.quadraticCurveTo(128, 200, 186, 170);\n      context.strokeStyle = \"black\";\n      context.lineWidth = 10;\n      context.stroke();\n\n      return new THREE.CanvasTexture(canvas);\n    }\n\n    // Animation loop\n    const animate = () => {\n      if (!cubeRef.current) return;\n\n      requestAnimationFrame(animate);\n      currentRotation.x += (targetRotation.x - currentRotation.x) * 0.1;\n      currentRotation.y += (targetRotation.y - currentRotation.y) * 0.1;\n      cubeRef.current.rotation.x = currentRotation.y;\n      cubeRef.current.rotation.y = currentRotation.x;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n    setIsLoaded(true);\n\n    // Handle resize\n    const handleResize = () => {\n      if (!containerRef.current) return;\n      camera.aspect =\n        containerRef.current.clientWidth / containerRef.current.clientHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(\n        containerRef.current.clientWidth,\n        containerRef.current.clientHeight\n      );\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"resize\", handleResize);\n      if (containerRef.current) {\n        containerRef.current.removeEventListener(\n          \"mouseleave\",\n          handleMouseLeave\n        );\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      geometry.dispose();\n      materials.forEach((material) => material.dispose());\n      renderer.dispose();\n      cubeRef.current = null;\n      sceneRef.current = null;\n    };\n  }, []);\n\n  return (\n    <div className=\"w-full h-full relative\">\n      <div\n        ref={containerRef}\n        className=\"w-full h-full bg-transparent rounded-xl\"\n      >\n        {!isLoaded && (\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}