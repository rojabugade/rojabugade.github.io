{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/kshtj/CourseWork/Study/portfolio/app/components/Client/spline.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { Suspense, useState, useEffect } from \"react\";\n\ninterface SplineClientWrapperProps {\n  scene: string;\n  className?: string;\n}\n\n// Loader component\nfunction SplineLoader() {\n  return (\n    <div className=\"w-full h-full flex items-center justify-center\">\n      <div className=\"w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n    </div>\n  );\n}\n\nexport default function SplineClientWrapper({\n  scene,\n  className = \"\",\n}: SplineClientWrapperProps) {\n  // State to track if component is mounted\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [SplineComponent, setSplineComponent] =\n    useState<React.ComponentType<any> | null>(null);\n\n  useEffect(() => {\n    // Only import Spline in the client\n    let isMounted = true;\n\n    const loadSpline = async () => {\n      try {\n        // Dynamically import Spline only on the client side\n        const SplineModule = await import(\"@splinetool/react-spline/next\");\n\n        // Only update state if component is still mounted\n        if (isMounted) {\n          setSplineComponent(() => SplineModule.default);\n          setIsLoaded(true);\n        }\n      } catch (error) {\n        console.error(\"Failed to load Spline:\", error);\n      }\n    };\n\n    loadSpline();\n\n    // Cleanup function\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  if (!isLoaded || !SplineComponent) {\n    return <SplineLoader />;\n  }\n\n  // Using the dynamically loaded component\n  return (\n    <div className={className}>\n      <Suspense fallback={<SplineLoader />}>\n        <SplineComponent scene={scene} />\n      </Suspense>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;;;AAFA;;AASA,mBAAmB;AACnB,SAAS;IACP,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;;;;;;;;;;AAGrB;KANS;AAQM,SAAS,oBAAoB,EAC1C,KAAK,EACL,YAAY,EAAE,EACW;;IACzB,yCAAyC;IACzC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,iBAAiB,mBAAmB,GACzC,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAmC;IAE5C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;yCAAE;YACR,mCAAmC;YACnC,IAAI,YAAY;YAEhB,MAAM;4DAAa;oBACjB,IAAI;wBACF,oDAAoD;wBACpD,MAAM,eAAe;wBAErB,kDAAkD;wBAClD,IAAI,WAAW;4BACb;4EAAmB,IAAM,aAAa,OAAO;;4BAC7C,YAAY;wBACd;oBACF,EAAE,OAAO,OAAO;wBACd,QAAQ,KAAK,CAAC,0BAA0B;oBAC1C;gBACF;;YAEA;YAEA,mBAAmB;YACnB;iDAAO;oBACL,YAAY;gBACd;;QACF;wCAAG,EAAE;IAEL,IAAI,CAAC,YAAY,CAAC,iBAAiB;QACjC,qBAAO,6LAAC;;;;;IACV;IAEA,yCAAyC;IACzC,qBACE,6LAAC;QAAI,WAAW;kBACd,cAAA,6LAAC,6JAAA,CAAA,WAAQ;YAAC,wBAAU,6LAAC;;;;;sBACnB,cAAA,6LAAC;gBAAgB,OAAO;;;;;;;;;;;;;;;;AAIhC;GAhDwB;MAAA"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}